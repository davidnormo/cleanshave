{
  var Tag = require('./parser/tag'),
      Section = require('./parser/section'),
      Text = require('./parser/text'),
      HTML = require('./parser/html');
      Partial = require('./parser/partial');
}

template
  = (tag / html / text)+

tag
  = '{{' key:tagKey '}}' { 
      return new Tag(key, true); 
    }
    / '{{{' key:tagKey '}}}' { 
      return new Tag(key, false); 
    }
    / '{{&' key:tagKey '}}' { 
      return new Tag(key, false);
    }
    / '{{#' key:tagKey '}}' inner:template? '{{/' tagKey '}}' { 
      return new Section(key, inner, false); 
    }
    / '{{^' key:tagKey '}}' inner:template? '{{/' tagKey '}}'{
      return new Section(key, inner, true)
    }
    /  '{{>' key:tagKey '}}' {
      return new Partial(key);
    }

tagKey
  = key:[a-zA-Z0-9 .]+ { 
    var result = key.join('').trim();
    return result === '.' ? [result] : result.split('.'); 
  }

html
  = '<' tagname:alphaword attributes:(attributes+)? '>' content:(template)? ('</' alphaword '>')? { 
    return new HTML(tagname, attributes, content);
  }

text
  = text:words { return new Text(text); }

attributes
  = ' ' key:(attributeIdent / tag) '=' ['"] value:(alphawords / tag)+ ['"] { return { key: key, value: value } }

dotted
  = ('.' obj:alphaword { return obj; })+

attributeIdent
  = word:[a-zA-Z-]+ { return word.join(''); }

alphaword
  = word:[a-zA-Z0-9]+ { return word.join(''); }

alphawords
  = words:[a-zA-Z0-9\s]+ { return words.join(''); }

words
  = words:([^<{] / nonTag / ' ')+ { return words.join('').replace(/"/g, "\\\"") }

nonTag
  = start:[^ <] ![{] txt:([^ <]+)? { 
    txt = txt || [];
    return start + txt.join('') 
  }